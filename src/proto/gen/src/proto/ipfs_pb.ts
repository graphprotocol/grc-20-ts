// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file src/proto/ipfs.proto (package grc20, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum grc20.DataType
 */
export enum DataType {
  /**
   * @generated from enum value: TEXT = 0;
   */
  TEXT = 0,

  /**
   * @generated from enum value: NUMBER = 1;
   */
  NUMBER = 1,

  /**
   * @generated from enum value: CHECKBOX = 2;
   */
  CHECKBOX = 2,

  /**
   * @generated from enum value: TIME = 3;
   */
  TIME = 3,

  /**
   * @generated from enum value: POINT = 4;
   */
  POINT = 4,

  /**
   * @generated from enum value: RELATION = 5;
   */
  RELATION = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(DataType)
proto3.util.setEnumType(DataType, "grc20.DataType", [
  { no: 0, name: "TEXT" },
  { no: 1, name: "NUMBER" },
  { no: 2, name: "CHECKBOX" },
  { no: 3, name: "TIME" },
  { no: 4, name: "POINT" },
  { no: 5, name: "RELATION" },
]);

/**
 * @generated from message grc20.Edit
 */
export class Edit extends Message<Edit> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated grc20.Op ops = 3;
   */
  ops: Op[] = [];

  /**
   * @generated from field: repeated bytes authors = 4;
   */
  authors: Uint8Array[] = [];

  /**
   * @generated from field: optional bytes language = 5;
   */
  language?: Uint8Array;

  constructor(data?: PartialMessage<Edit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.Edit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ops", kind: "message", T: Op, repeated: true },
    { no: 4, name: "authors", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 5, name: "language", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Edit {
    return new Edit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Edit {
    return new Edit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Edit {
    return new Edit().fromJsonString(jsonString, options);
  }

  static equals(a: Edit | PlainMessage<Edit> | undefined, b: Edit | PlainMessage<Edit> | undefined): boolean {
    return proto3.util.equals(Edit, a, b);
  }
}

/**
 * @generated from message grc20.ImportEdit
 */
export class ImportEdit extends Message<ImportEdit> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated grc20.Op ops = 3;
   */
  ops: Op[] = [];

  /**
   * @generated from field: repeated bytes authors = 4;
   */
  authors: Uint8Array[] = [];

  /**
   * @generated from field: bytes created_by = 5;
   */
  createdBy = new Uint8Array(0);

  /**
   * @generated from field: string created_at = 6;
   */
  createdAt = "";

  /**
   * @generated from field: bytes block_hash = 7;
   */
  blockHash = new Uint8Array(0);

  /**
   * @generated from field: string block_number = 8;
   */
  blockNumber = "";

  /**
   * @generated from field: bytes transaction_hash = 9;
   */
  transactionHash = new Uint8Array(0);

  constructor(data?: PartialMessage<ImportEdit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.ImportEdit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ops", kind: "message", T: Op, repeated: true },
    { no: 4, name: "authors", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 5, name: "created_by", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "block_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "block_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "transaction_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportEdit {
    return new ImportEdit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportEdit {
    return new ImportEdit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportEdit {
    return new ImportEdit().fromJsonString(jsonString, options);
  }

  static equals(a: ImportEdit | PlainMessage<ImportEdit> | undefined, b: ImportEdit | PlainMessage<ImportEdit> | undefined): boolean {
    return proto3.util.equals(ImportEdit, a, b);
  }
}

/**
 * @generated from message grc20.Import
 */
export class Import extends Message<Import> {
  /**
   * these strings are IPFS cids representing the import edit message
   *
   * @generated from field: repeated string edits = 1;
   */
  edits: string[] = [];

  constructor(data?: PartialMessage<Import>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.Import";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "edits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Import {
    return new Import().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Import {
    return new Import().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Import {
    return new Import().fromJsonString(jsonString, options);
  }

  static equals(a: Import | PlainMessage<Import> | undefined, b: Import | PlainMessage<Import> | undefined): boolean {
    return proto3.util.equals(Import, a, b);
  }
}

/**
 * @generated from message grc20.File
 */
export class File extends Message<File> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from oneof grc20.File.payload
   */
  payload: {
    /**
     * @generated from field: grc20.Edit add_edit = 2;
     */
    value: Edit;
    case: "addEdit";
  } | {
    /**
     * @generated from field: grc20.Import import_space = 3;
     */
    value: Import;
    case: "importSpace";
  } | {
    /**
     * @generated from field: bytes archive_space = 4;
     */
    value: Uint8Array;
    case: "archiveSpace";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "add_edit", kind: "message", T: Edit, oneof: "payload" },
    { no: 3, name: "import_space", kind: "message", T: Import, oneof: "payload" },
    { no: 4, name: "archive_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * @generated from message grc20.Op
 */
export class Op extends Message<Op> {
  /**
   * @generated from oneof grc20.Op.payload
   */
  payload: {
    /**
     * @generated from field: grc20.Entity update_entity = 1;
     */
    value: Entity;
    case: "updateEntity";
  } | {
    /**
     * @generated from field: grc20.Relation create_relation = 2;
     */
    value: Relation;
    case: "createRelation";
  } | {
    /**
     * @generated from field: grc20.RelationUpdate update_relation = 3;
     */
    value: RelationUpdate;
    case: "updateRelation";
  } | {
    /**
     * @generated from field: bytes delete_relation = 4;
     */
    value: Uint8Array;
    case: "deleteRelation";
  } | {
    /**
     * @generated from field: grc20.Property create_property = 5;
     */
    value: Property;
    case: "createProperty";
  } | {
    /**
     * @generated from field: grc20.UnsetEntityValues unset_entity_values = 6;
     */
    value: UnsetEntityValues;
    case: "unsetEntityValues";
  } | {
    /**
     * @generated from field: grc20.UnsetRelationFields unset_relation_fields = 7;
     */
    value: UnsetRelationFields;
    case: "unsetRelationFields";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Op>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.Op";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_entity", kind: "message", T: Entity, oneof: "payload" },
    { no: 2, name: "create_relation", kind: "message", T: Relation, oneof: "payload" },
    { no: 3, name: "update_relation", kind: "message", T: RelationUpdate, oneof: "payload" },
    { no: 4, name: "delete_relation", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "payload" },
    { no: 5, name: "create_property", kind: "message", T: Property, oneof: "payload" },
    { no: 6, name: "unset_entity_values", kind: "message", T: UnsetEntityValues, oneof: "payload" },
    { no: 7, name: "unset_relation_fields", kind: "message", T: UnsetRelationFields, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Op {
    return new Op().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Op {
    return new Op().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Op {
    return new Op().fromJsonString(jsonString, options);
  }

  static equals(a: Op | PlainMessage<Op> | undefined, b: Op | PlainMessage<Op> | undefined): boolean {
    return proto3.util.equals(Op, a, b);
  }
}

/**
 * @generated from message grc20.Property
 */
export class Property extends Message<Property> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: grc20.DataType data_type = 2;
   */
  dataType = DataType.TEXT;

  constructor(data?: PartialMessage<Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "data_type", kind: "enum", T: proto3.getEnumType(DataType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Property {
    return new Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Property {
    return new Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Property {
    return new Property().fromJsonString(jsonString, options);
  }

  static equals(a: Property | PlainMessage<Property> | undefined, b: Property | PlainMessage<Property> | undefined): boolean {
    return proto3.util.equals(Property, a, b);
  }
}

/**
 * @generated from message grc20.UnsetEntityValues
 */
export class UnsetEntityValues extends Message<UnsetEntityValues> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: repeated bytes properties = 2;
   */
  properties: Uint8Array[] = [];

  constructor(data?: PartialMessage<UnsetEntityValues>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.UnsetEntityValues";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "properties", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsetEntityValues {
    return new UnsetEntityValues().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsetEntityValues {
    return new UnsetEntityValues().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsetEntityValues {
    return new UnsetEntityValues().fromJsonString(jsonString, options);
  }

  static equals(a: UnsetEntityValues | PlainMessage<UnsetEntityValues> | undefined, b: UnsetEntityValues | PlainMessage<UnsetEntityValues> | undefined): boolean {
    return proto3.util.equals(UnsetEntityValues, a, b);
  }
}

/**
 * @generated from message grc20.Relation
 */
export class Relation extends Message<Relation> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: bytes type = 2;
   */
  type = new Uint8Array(0);

  /**
   * @generated from field: bytes from_entity = 3;
   */
  fromEntity = new Uint8Array(0);

  /**
   * @generated from field: optional bytes from_space = 4;
   */
  fromSpace?: Uint8Array;

  /**
   * @generated from field: optional bytes from_version = 5;
   */
  fromVersion?: Uint8Array;

  /**
   * @generated from field: bytes to_entity = 6;
   */
  toEntity = new Uint8Array(0);

  /**
   * @generated from field: optional bytes to_space = 7;
   */
  toSpace?: Uint8Array;

  /**
   * @generated from field: optional bytes to_version = 8;
   */
  toVersion?: Uint8Array;

  /**
   * @generated from field: bytes entity = 9;
   */
  entity = new Uint8Array(0);

  /**
   * @generated from field: optional string position = 10;
   */
  position?: string;

  /**
   * @generated from field: optional bool verified = 11;
   */
  verified?: boolean;

  constructor(data?: PartialMessage<Relation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.Relation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "type", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "from_entity", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "from_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 5, name: "from_version", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 6, name: "to_entity", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "to_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 8, name: "to_version", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 9, name: "entity", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "position", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Relation {
    return new Relation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Relation {
    return new Relation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Relation {
    return new Relation().fromJsonString(jsonString, options);
  }

  static equals(a: Relation | PlainMessage<Relation> | undefined, b: Relation | PlainMessage<Relation> | undefined): boolean {
    return proto3.util.equals(Relation, a, b);
  }
}

/**
 * @generated from message grc20.RelationUpdate
 */
export class RelationUpdate extends Message<RelationUpdate> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: optional bytes from_space = 2;
   */
  fromSpace?: Uint8Array;

  /**
   * @generated from field: optional bytes from_version = 3;
   */
  fromVersion?: Uint8Array;

  /**
   * @generated from field: optional bytes to_space = 4;
   */
  toSpace?: Uint8Array;

  /**
   * @generated from field: optional bytes to_version = 5;
   */
  toVersion?: Uint8Array;

  /**
   * @generated from field: optional string position = 6;
   */
  position?: string;

  /**
   * @generated from field: optional bool verified = 7;
   */
  verified?: boolean;

  constructor(data?: PartialMessage<RelationUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.RelationUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "from_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 3, name: "from_version", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 4, name: "to_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 5, name: "to_version", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 6, name: "position", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelationUpdate {
    return new RelationUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelationUpdate {
    return new RelationUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelationUpdate {
    return new RelationUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: RelationUpdate | PlainMessage<RelationUpdate> | undefined, b: RelationUpdate | PlainMessage<RelationUpdate> | undefined): boolean {
    return proto3.util.equals(RelationUpdate, a, b);
  }
}

/**
 * @generated from message grc20.UnsetRelationFields
 */
export class UnsetRelationFields extends Message<UnsetRelationFields> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: optional bool from_space = 2;
   */
  fromSpace?: boolean;

  /**
   * @generated from field: optional bool from_version = 3;
   */
  fromVersion?: boolean;

  /**
   * @generated from field: optional bool to_space = 4;
   */
  toSpace?: boolean;

  /**
   * @generated from field: optional bool to_version = 5;
   */
  toVersion?: boolean;

  /**
   * @generated from field: optional bool position = 6;
   */
  position?: boolean;

  /**
   * @generated from field: optional bool verified = 7;
   */
  verified?: boolean;

  constructor(data?: PartialMessage<UnsetRelationFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.UnsetRelationFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "from_space", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "from_version", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "to_space", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "to_version", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "position", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsetRelationFields {
    return new UnsetRelationFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsetRelationFields {
    return new UnsetRelationFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsetRelationFields {
    return new UnsetRelationFields().fromJsonString(jsonString, options);
  }

  static equals(a: UnsetRelationFields | PlainMessage<UnsetRelationFields> | undefined, b: UnsetRelationFields | PlainMessage<UnsetRelationFields> | undefined): boolean {
    return proto3.util.equals(UnsetRelationFields, a, b);
  }
}

/**
 * @generated from message grc20.Entity
 */
export class Entity extends Message<Entity> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: repeated grc20.Value values = 2;
   */
  values: Value[] = [];

  constructor(data?: PartialMessage<Entity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.Entity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "values", kind: "message", T: Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entity {
    return new Entity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJsonString(jsonString, options);
  }

  static equals(a: Entity | PlainMessage<Entity> | undefined, b: Entity | PlainMessage<Entity> | undefined): boolean {
    return proto3.util.equals(Entity, a, b);
  }
}

/**
 * @generated from message grc20.Options
 */
export class Options extends Message<Options> {
  /**
   * @generated from oneof grc20.Options.value
   */
  value: {
    /**
     * @generated from field: grc20.TextOptions text = 1;
     */
    value: TextOptions;
    case: "text";
  } | {
    /**
     * @generated from field: grc20.NumberOptions number = 2;
     */
    value: NumberOptions;
    case: "number";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "message", T: TextOptions, oneof: "value" },
    { no: 2, name: "number", kind: "message", T: NumberOptions, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Options {
    return new Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Options {
    return new Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Options {
    return new Options().fromJsonString(jsonString, options);
  }

  static equals(a: Options | PlainMessage<Options> | undefined, b: Options | PlainMessage<Options> | undefined): boolean {
    return proto3.util.equals(Options, a, b);
  }
}

/**
 * @generated from message grc20.Value
 */
export class Value extends Message<Value> {
  /**
   * @generated from field: bytes property = 1;
   */
  property = new Uint8Array(0);

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: optional grc20.Options options = 3;
   */
  options?: Options;

  constructor(data?: PartialMessage<Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "property", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: Options, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Value {
    return new Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJsonString(jsonString, options);
  }

  static equals(a: Value | PlainMessage<Value> | undefined, b: Value | PlainMessage<Value> | undefined): boolean {
    return proto3.util.equals(Value, a, b);
  }
}

/**
 * @generated from message grc20.TextOptions
 */
export class TextOptions extends Message<TextOptions> {
  /**
   * @generated from field: optional bytes language = 1;
   */
  language?: Uint8Array;

  constructor(data?: PartialMessage<TextOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.TextOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "language", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextOptions {
    return new TextOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextOptions {
    return new TextOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextOptions {
    return new TextOptions().fromJsonString(jsonString, options);
  }

  static equals(a: TextOptions | PlainMessage<TextOptions> | undefined, b: TextOptions | PlainMessage<TextOptions> | undefined): boolean {
    return proto3.util.equals(TextOptions, a, b);
  }
}

/**
 * @generated from message grc20.NumberOptions
 */
export class NumberOptions extends Message<NumberOptions> {
  /**
   * @generated from field: optional bytes unit = 1;
   */
  unit?: Uint8Array;

  constructor(data?: PartialMessage<NumberOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grc20.NumberOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unit", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumberOptions {
    return new NumberOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumberOptions {
    return new NumberOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumberOptions {
    return new NumberOptions().fromJsonString(jsonString, options);
  }

  static equals(a: NumberOptions | PlainMessage<NumberOptions> | undefined, b: NumberOptions | PlainMessage<NumberOptions> | undefined): boolean {
    return proto3.util.equals(NumberOptions, a, b);
  }
}

